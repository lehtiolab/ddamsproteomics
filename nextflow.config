/*
 * -------------------------------------------------
 *  lehtiolab/ddamsproteomics Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  help = false
  outdir = './results'
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  external_config_version = 'master'

  strips = ['3-10': [intercept: 3.5478, fr_width: 0.0676, tolerance: 0.11, fr_amount: 72, reverse: false],
            '3.7-4.9': [intercept: 3.5959, fr_width: 0.0174, tolerance: 0.08, fr_amount: 72, reverse: false],
            '11-6': [intercept: 10.3936, fr_width: -0.0762, tolerance: 0.11, fr_amount: 60, reverse: true],
            '6-9': [intercept: 6.1159, fr_width: 0.0336, pi_tolerance: 0.11, fr_amount: 72, reverse: false],
            '3.4-4.8': ['1-21': [intercept: 3.4395, fr_width: 0.0221, tolerance: 0.08, fr_amount: 21, reverse: false],
                        '22-64': [intercept: 3.6374, fr_width: 0.0128, tolerance: 0.08, fr_amount: 43, reverse: false],
                        '65-72': [intercept: 1.7364, fr_width: 0.0424, tolerance: 0.08, fr_amount: 8, reverse: false],
             ],

  ]
  minpsms_luciphor = 50
  msgfmods = "$baseDir/assets/msgfmods.txt"
}

// Container slug. Stable releases should specify release tag!
process.container = 'lehtiolab/ddamsproteomics:2.18'
//process.container = 'lehtiolab/ddamsproteomics:dev'

includeConfig 'conf/base.config'
profiles {

  conda { 
    // FIXME not in DSL2
    process.conda = "$baseDir/environment.yml"
  }
  test {
    includeConfig 'conf/test.config'
  }
  docker {
    docker.enabled = true
    docker.fixOwnership = true
    singularity.enabled = false
    conda.enabled = false
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  lehtio { 
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${params.external_config_version}/nf-configs/lehtio.config"
  }
  awsbatch {
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

timeline {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_dag_${trace_timestamp}.svg"
}

manifest {
  name = 'lehtiolab/ddamsproteomics'
  author = 'Jorrit Boekel'
  homePage = 'https://github.com/lehtiolab/ddamsproteomics'
  description = 'Quantitative DDA MS proteomics pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '==22.10.5'
  version = '2.18'
  doi = '10.5281/zenodo.3548311'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1) {
        return params.max_memory as nextflow.util.MemoryUnit
      } else {
        return obj
}
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

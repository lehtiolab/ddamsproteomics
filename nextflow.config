/*
 * -------------------------------------------------
 *  lehtiolab/ddamsproteomics Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  help = false
  outdir = './results'
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
}

// Container slug. Stable releases should specify release tag!
process.container = 'lehtiolab/ddamsproteomics:2.15'
//process.container = 'ddamsproteomics:dev'

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    docker.fixOwnership = true
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  lehtio { 
    includeConfig 'conf/base.config'
    includeConfig 'conf/lehtio.config'
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  test_nofrac {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test_nofrac.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/lehtiolab/ddamsproteomics_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/lehtiolab/ddamsproteomics_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/lehtiolab/ddamsproteomics_trace.txt"
  overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/lehtiolab/ddamsproteomics_dag.svg"
  overwrite = true
}

manifest {
  name = 'lehtiolab/ddamsproteomics'
  author = 'Jorrit Boekel'
  homePage = 'https://github.com/lehtiolab/ddamsproteomics'
  description = 'Quantitative DDA MS proteomics pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '2.15'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1) {
        return params.max_memory as nextflow.util.MemoryUnit
      } else {
        return obj
}
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
